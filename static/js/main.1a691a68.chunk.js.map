{"version":3,"sources":["logo.svg","Images/sds.jpg","Images/kfu.jpg","Images/summerdays.jpg","Images/mm.jpg","Components/Home.jsx","Components/Menu.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","Fragment","id","PureComponent","Menu","state","_this2","this","className","index_esm","onClick","social","num","document","location","Component","App","Components_Menu","Components_Home","Boolean","window","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0IAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+JCgCzBC,4MAzBP,OACIC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,WACJJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,YAEZJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,cACAJ,EAAAC,EAAAC,cAAA,MAAIE,GAAG,SAAP,eACAJ,EAAAC,EAAAC,cAAA,UAAQE,GAAG,UAAX,UAAmCJ,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACxCF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,aACJJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,YACRJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,YACRJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,YACRJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,sBAdjBC,yBCyBJC,6MAxBXC,MAAQ,2EACC,IAAAC,EAAAC,KACL,OAEIT,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACQH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,WACJJ,EAAAC,EAAAC,cAAA,KAAGE,GAAG,cAAN,YACAJ,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,eACXV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAaC,QAAS,kBAAKJ,EAAKK,OAAO,MAAkBb,EAAAC,EAAAC,cAAA,WACzDF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAcC,QAAS,kBAAKJ,EAAKK,OAAO,MAAmBb,EAAAC,EAAAC,cAAA,WAC3DF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAWC,QAAS,kBAAKJ,EAAKK,OAAO,MAAgBb,EAAAC,EAAAC,cAAA,WACrDF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAoBC,QAAS,kBAAKJ,EAAKK,OAAO,wCAO/DC,GAEHC,SAASC,SADU,CAAC,8CAA8C,yCAAyC,GAAG,oCAC7EF,UArBtBG,aCSJC,MATf,WACE,OACElB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAACiB,EAAD,MACAnB,EAAAC,EAAAC,cAACkB,EAAD,QCGcC,QACW,cAA7BC,OAAON,SAASO,UAEe,UAA7BD,OAAON,SAASO,UAEhBD,OAAON,SAASO,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASZ,SAASa,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1a691a68.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/sds.bde8a8a5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/kfu.2c74e2d5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/summerdays.f0a73415.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mm.ab90f135.jpg\";","import React, { PureComponent } from 'react';\r\nimport sds from '../Images/sds.jpg'\r\nimport kfu from '../Images/kfu.jpg'\r\nimport summerdays from '../Images/summerdays.jpg'\r\nimport mm from '../Images/mm.jpg'\r\nclass Home extends PureComponent {\r\n    render() { \r\n        return ( \r\n            <React.Fragment>\r\n                <div id='HomeTab'>\r\n                    <div id=\"poster\" ></div>\r\n                </div>\r\n                <div id=\"posterInfo\">\r\n                        <h1 id=\"title\">Summer Days</h1>\r\n                        <button id=\"button\">Listen</button><br/><br/>\r\n                        <div id=\"cirlceDot\">\r\n                            <div id=\"circle1\"></div>\r\n                            <div id=\"circle2\"></div>\r\n                            <div id=\"circle3\"></div>\r\n                            <div id=\"circle4\"></div>\r\n                        </div>\r\n                </div>\r\n            </React.Fragment>\r\n\r\n         );\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n \r\nexport default Home;","import React, { Component } from 'react';\r\nimport { FaInstagram } from \"react-icons/fa\";\r\nimport { FaSoundcloud } from \"react-icons/fa\";\r\nimport { FaYoutube } from \"react-icons/fa\";\r\nimport { FaInternetExplorer } from \"react-icons/fa\";\r\nclass Menu extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            \r\n            <React.Fragment>\r\n                    <div id=\"menuDiv\">\r\n                        <p id=\"artistName\">Wavy Kid</p>\r\n                        <div className=\"Socialicons\">\r\n                            <FaInstagram onClick={()=> this.social(0)}></FaInstagram><br/>\r\n                            <FaSoundcloud onClick={()=> this.social(1)}></FaSoundcloud><br/>\r\n                            <FaYoutube onClick={()=> this.social(2)}></FaYoutube><br/>\r\n                            <FaInternetExplorer onClick={()=> this.social(3)}></FaInternetExplorer>\r\n                        </div>\r\n                    </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    social(num){\r\n        var socialArray =  [\"https://www.instagram.com/wavykiddofficial/\",\"http://soundcloud.com/wavykiddofficial\",\"\",\"http://www.superblacktapes.co.za\"]\r\n        document.location =  socialArray[num];\r\n    }\r\n}\r\n \r\nexport default Menu;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './Components/Home'\nimport Menu from './Components/Menu'\nfunction App() {\n  return (\n    <React.Fragment>\n      <Menu/>\n      <Home/>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}